'use client';
import * as React from 'react';
import { warnOnce } from '@mui/x-internals/warning';
import { ChartPlugin } from '../../models';
import { UseChartCartesianAxisSignature } from './useChartCartesianAxis.types';
import { rainbowSurgePalette } from '../../../../colorPalettes';
import { useSelector } from '../../../store/useSelector';
import { selectorChartDrawingArea } from '../../corePlugins/useChartDimensions/useChartDimensions.selectors';
import { selectorChartSeriesProcessed } from '../../corePlugins/useChartSeries/useChartSeries.selectors';
import { defaultizeXAxis, defaultizeYAxis } from './defaultizeAxis';
import { selectorChartXAxis, selectorChartYAxis } from './useChartCartesianAxisRendering.selectors';
import { getAxisValue } from './getAxisValue';
import { getSVGPoint } from '../../../getSVGPoint';
import {
  selectorChartsInteractionAxis,
  selectorChartsInteractionIsInitialized,
} from '../useChartInteraction';

export const useChartCartesianAxis: ChartPlugin<UseChartCartesianAxisSignature<any>> = ({
  params,
  store,
  seriesConfig,
  svgRef,
  instance,
}) => {
  const { xAxis, yAxis, dataset } = params;

  if (process.env.NODE_ENV !== 'production') {
    const ids = [...(xAxis ?? []), ...(yAxis ?? [])]
      .filter((axis) => axis.id)
      .map((axis) => axis.id);
    const duplicates = new Set(ids.filter((id, index) => ids.indexOf(id) !== index));
    if (duplicates.size > 0) {
      warnOnce(
        [
          `MUI X: The following axis ids are duplicated: ${Array.from(duplicates).join(', ')}.`,
          `Please make sure that each axis has a unique id.`,
        ].join('\n'),
        'error',
      );
    }
  }

  const drawingArea = useSelector(store, selectorChartDrawingArea);
  const processedSeries = useSelector(store, selectorChartSeriesProcessed);

  const interactionAxis = useSelector(store, selectorChartsInteractionAxis);
  const isInteractionEnabled = useSelector(store, selectorChartsInteractionIsInitialized);
  const { axis: xAxisWithScale, axisIds: xAxisIds } = useSelector(store, selectorChartXAxis);
  const { axis: yAxisWithScale, axisIds: yAxisIds } = useSelector(store, selectorChartYAxis);

  // The effect do not track any value defined synchronously during the 1st render by hooks called after `useChartCartesianAxis`
  // As a consequence, the state generated by the 1st run of this useEffect will always be equal to the initialization one
  const isFirstRender = React.useRef(true);
  React.useEffect(() => {
    if (isFirstRender.current) {
      isFirstRender.current = false;
      return;
    }

    store.update((prev) => ({
      ...prev,
      cartesianAxis: {
        ...prev.cartesianAxis,
        x: defaultizeXAxis(xAxis, dataset),
        y: defaultizeYAxis(yAxis, dataset),
      },
    }));
  }, [seriesConfig, drawingArea, xAxis, yAxis, dataset, store]);

  const usedXAxis = xAxisIds[0];
  const usedYAxis = yAxisIds[0];

  const mousePosition = React.useRef({
    isInChart: false,
  });

  React.useEffect(() => {
    const element = svgRef.current;
    if (!isInteractionEnabled || !element || params.disableAxisListener) {
      return () => {};
    }

    const removeOnHover = instance.addInteractionListener('hover', (state) => {
      if (!state.hovering) {
        instance.cleanInteraction?.();
      }
    });

    const [removeOnMove, removeOnDrag] = ['move', 'drag'].map((interaction) =>
      instance.addInteractionListener(
        // We force `as drag` to fix typing
        interaction as 'drag',
        (state) => {
          const target =
            'targetTouches' in state.event
              ? (state.event as any as TouchEvent).targetTouches[0]
              : state.event;
          const svgPoint = getSVGPoint(element, target);

          const isPointInside = instance.isPointInside(svgPoint, {
            targetElement: state.event.target as SVGElement,
          });
          if (!isPointInside) {
            if (mousePosition.current.isInChart) {
              store.update((prev) => ({
                ...prev,
                interaction: { item: null, axis: { x: null, y: null } },
              }));
              mousePosition.current.isInChart = false;
            }
          }

          mousePosition.current.isInChart = true;

          instance.setAxisInteraction?.({
            x: getAxisValue(xAxisWithScale[usedXAxis], svgPoint.x),
            y: getAxisValue(yAxisWithScale[usedYAxis], svgPoint.y),
          });
        },
      ),
    );

    return () => {
      removeOnHover();
      removeOnMove();
      removeOnDrag();
    };
  }, [
    svgRef,
    store,
    xAxisWithScale,
    usedXAxis,
    yAxisWithScale,
    usedYAxis,
    instance,
    params.disableAxisListener,
    isInteractionEnabled,
  ]);

  const axisInteractionRef = React.useRef<
    Record<'x' | 'y', null | { value: number | Date | string; index: number }>
  >({
    x: null,
    y: null,
  });

  // This avoids re-attaching the event listener on mouse move.
  React.useEffect(() => {
    const { x, y } = interactionAxis;
    axisInteractionRef.current.x = x;
    axisInteractionRef.current.y = y;
  }, [interactionAxis]);

  React.useEffect(() => {
    const element = svgRef.current;
    const onAxisClick = params.onAxisClick;
    if (element === null || !onAxisClick) {
      return () => {};
    }

    const removeOnDrag = instance.addInteractionListener('drag', (state) => {
      if (!state.tap) {
        return;
      }

      let dataIndex: number | null = null;
      let isXAxis: boolean = false;
      if (axisInteractionRef.current.x === null && axisInteractionRef.current.y === null) {
        const svgPoint = getSVGPoint(element, state.event);

        const xIndex = getAxisValue(xAxisWithScale[usedXAxis], svgPoint.x)?.index ?? null;
        isXAxis = xIndex !== null && xIndex !== -1;

        dataIndex = isXAxis
          ? xIndex
          : (getAxisValue(yAxisWithScale[usedYAxis], svgPoint.y)?.index ?? null);
      } else {
        isXAxis =
          axisInteractionRef.current.x !== null && axisInteractionRef.current.x.index !== -1;
        dataIndex = isXAxis
          ? axisInteractionRef.current.x && axisInteractionRef.current.x.index
          : axisInteractionRef.current.y && axisInteractionRef.current.y.index;
      }

      const USED_AXIS_ID = isXAxis ? xAxisIds[0] : yAxisIds[0];
      if (dataIndex == null || dataIndex === -1) {
        return;
      }

      // The .data exist because otherwise the dataIndex would be null or -1.
      const axisValue = (isXAxis ? xAxisWithScale : yAxisWithScale)[USED_AXIS_ID].data![dataIndex];

      const seriesValues: Record<string, number | null | undefined> = {};

      Object.keys(processedSeries)
        .filter((seriesType): seriesType is 'bar' | 'line' => ['bar', 'line'].includes(seriesType))
        .forEach((seriesType) => {
          processedSeries[seriesType]?.seriesOrder.forEach((seriesId) => {
            const seriesItem = processedSeries[seriesType]!.series[seriesId];

            const providedXAxisId = seriesItem.xAxisId;
            const providedYAxisId = seriesItem.yAxisId;

            const axisKey = isXAxis ? providedXAxisId : providedYAxisId;
            if (axisKey === undefined || axisKey === USED_AXIS_ID) {
              seriesValues[seriesId] = seriesItem.data[dataIndex];
            }
          });
        });

      onAxisClick(state.event, { dataIndex, axisValue, seriesValues });
    });

    return () => {
      removeOnDrag();
    };
  }, [
    params.onAxisClick,
    processedSeries,
    svgRef,
    xAxisWithScale,
    xAxisIds,
    yAxisWithScale,
    yAxisIds,
    axisInteractionRef,
    usedXAxis,
    usedYAxis,
    instance,
  ]);

  return {};
};

useChartCartesianAxis.params = {
  xAxis: true,
  yAxis: true,
  dataset: true,
  onAxisClick: true,
  disableAxisListener: true,
};

useChartCartesianAxis.getDefaultizedParams = ({ params }) => {
  return {
    ...params,
    colors: params.colors ?? rainbowSurgePalette,
    theme: params.theme ?? 'light',
    defaultizedXAxis: defaultizeXAxis(params.xAxis, params.dataset),
    defaultizedYAxis: defaultizeYAxis(params.yAxis, params.dataset),
  };
};

useChartCartesianAxis.getInitialState = (params) => ({
  cartesianAxis: {
    x: params.defaultizedXAxis,
    y: params.defaultizedYAxis,
  },
});
